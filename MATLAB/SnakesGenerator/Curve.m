function newTurtle=Curve(turtle,radius,deg)% positive radius is 90 deg to right of current direction.if sign(deg)<0	error('deg can''t be negative');enddistance=2*pi*abs(radius)*deg/360;distanceOk=turtle.nextMark-turtle.inkLength;if distanceOk>distance | ~turtle.ink	doMark=0;	distanceOk=distance;	degOk=deg;else	if distance==0		error('zero distance!');	end	doMark=1;	degOk=(distanceOk/distance)*deg;endoldAngle=atan2(turtle.direction(2),turtle.direction(1));% move to center of the circles=warning;warning off;orthoAngle=oldAngle-sign(1/radius)*pi/2;turtle.position=turtle.position+abs(radius)*[cos(orthoAngle),sin(orthoAngle)];% turnnewAngle=oldAngle-sign(1/radius)*pi*degOk/180;turtle.direction=[cos(newAngle),sin(newAngle)];% move to new location on the circumferenceorthoAngle=newAngle+sign(1/radius)*pi/2;warning(s);turtle.position=turtle.position+abs(radius)*[cos(orthoAngle),sin(orthoAngle)];if turtle.print	fprintf(' Curve %.0f deg with length %.0f;',degOk,distanceOk);endif turtle.ink	turtle.inkLength=turtle.inkLength+distanceOk;endif doMark	turtle=Mark(turtle);endif deg>degOk	turtle=Curve(turtle,radius,deg-degOk);endnewTurtle=turtle;